Simple linear Regression
========================
Continous numerical value.

Mathematical Intrepretion
=========================
Y = b0 + b1* X
Salary = b0 + b1 * Experience

Y (salary)      #Dependent Variable
X (experience)  #Independent Variable
b0 =Constant    #when Experience is 0, salary is constant{where line cut Y axis}
b1(cofficient)  #slope of line 




# Simple Linear Regression Code Example
=======================================
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Data/Salary_Data.csv')
X = dataset.iloc[:, :-1].values                              # except last(output) column
y = dataset.iloc[:, 1].values                                # output column (salary)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)

# Feature Scaling
"""from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)
sc_y = StandardScaler()
y_train = sc_y.fit_transform(y_train.reshape(-1,1))"""

# Fitting Simple Linear Regression to the Training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predicting the Test set results
y_pred = regressor.predict(X_test)

# Visualising the Training set results
plt.scatter(X_train, y_train, color = 'red')                   #training result
plt.plot(X_train, regressor.predict(X_train), color = 'blue')  #pridicted model
plt.title('Salary vs Experience (Training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

# Visualising the Test set results
plt.scatter(X_test, y_test, color = 'red')                      #test result
plt.plot(X_train, regressor.predict(X_train), color = 'blue')   #pridicted model
plt.title('Salary vs Experience (Test set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

#manually pridict salary
exp1=[12]
exp2=[15]
salary_pred = regressor.predict([exp1,exp2])
print(salary_pred)
